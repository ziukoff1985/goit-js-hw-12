{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["'use strict';\n\n// Імпортуємо бібліотеку Axios для виконання HTTP запитів\nimport axios from 'axios';\n\n// Ключ API та базовий URL для API Pixabay\nconst API_KEY = '46843956-48321f6890b82a65cca7319ef';\nconst BASE_URL = 'https://pixabay.com/api/';\n\n// Функція fetchImages (відправляє запит до API і обробляє відповідь)\nexport async function fetchImages(query, page = 1) {\n  // Створюємо параметри для запиту\n  const searchParams = new URLSearchParams({\n    key: API_KEY, // Ключ API для автентифікації.\n    q: query, // Запит на пошук, введений користувачем.\n    image_type: 'photo', // Тип зображень (лише фото)\n    orientation: 'horizontal', // Орієнтація зображень - горизонтальна.\n    safesearch: true, // Увімкнено безпечний пошук.\n    page: page, // Номер сторінки для пагінації.\n    per_page: 15, // Кількість зображень на сторінку.\n  });\n\n  // Формуємо URL для запиту, додаючи параметри пошуку\n  const url = `${BASE_URL}?${searchParams}`;\n\n  try {\n    // Відправляємо GET запит за допомогою axios\n    const response = await axios.get(url);\n\n    // Повертаємо дані з відповіді від API\n    return response.data;\n  } catch (error) {\n    // Якщо сталася помилка, показуємо сповіщення користувачеві\n    iziToast.error({\n      title: 'Error', // Заголовок повідомлення.\n      message: 'Failed to fetch images. Please try again later.', // Текст повідомлення для користувача.\n      position: 'topRight', // Розташування повідомлення.\n    });\n    // Виводимо помилку в консоль для налагодження\n    console.error('There was a problem with the fetch operation:', error);\n    throw error; // Перевикидаємо помилку, щоб основний код міг її обробити\n  }\n}\n","'use strict';\n\n// Оголошуємо змінну для доступу до контейнера галереї на сторінці\nconst gallery = document.querySelector('.gallery');\n\n/// Функція 'createMarkup' приймає масив об'єктів із зображеннями і створює динамічну HTML розмітку для галереї. Імпортується і використовується в файлі main.js\nexport function createMarkup(arrImages) {\n  // Використовуємо метод .map() для створення HTML рядків для кожного зображення\n  const markup = arrImages\n    .map(image => {\n      // Формуємо HTML для кожного зображення\n      return `<li class=\"gallery-item\">\n\t  <a class=\"gallery-link\" href=\"${image.largeImageURL}\">\n\t\t<img \n\t\t\tclass=\"gallery-image\" \n\t\t\tsrc=\"${image.webformatURL}\" \n\t\t\talt=\"${image.tags}\" loading=\"lazy\" \n\t\t\t/>\n        <div class=\"gallery-info\">\n        <p class=\"gallery-likes\"><span>Likes:</span> ${image.likes}</p>\n        <p class=\"gallery-views\"><span>Views:</span> ${image.views}</p>\n        <p class=\"gallery-comments\"><span>Comments:</span> ${image.comments}</p>\n        <p class=\"gallery-downloads\"><span>Downloads:</span> ${image.downloads}</p>\n      </div>    \n\t  </a>\n    </li>\n    `;\n    })\n    .join(''); // Перетворюємо масив рядків на одну строку HTML\n\n  // Додаємо створену розмітку в кінець контейнера галереї на сторінці\n  gallery.insertAdjacentHTML('beforeend', markup);\n}\n","'use strict';\n\n// Імпортуємо бібліотеку iziToast та стилі для відображення повідомлень.\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Імпортуємо бібліотеку SimpleLightbox та стилі для відображення зображень у збільшеному вигляді при кліку.\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\n// Імпортуємо функції:\n// fetchImages з файлу pixabay-api.js (виконує запит до API Pixabay і повертає зображення)\n// createMarkup з файлу render-functions.js (динамічно генерує HTML-розмітку для галереї зображень)\nimport { fetchImages } from './js/pixabay-api';\nimport { createMarkup } from './js/render-functions';\n\nlet lightbox; // Змінна для створення екземпляру класу SimpleLightbox та для оновлення lightbox після завантаження зображень\nlet currentQuery = ''; // Змінна для збереження поточного запиту користувача\nlet currentPage = 1; // Змінна для початкового значення номеру сторінки\nlet totalHits = 0; // Загальна кількість зображень, що відповідають запиту\n\n// Отримуємо доступи до елементів HTML:\nconst gallery = document.querySelector('.gallery'); // Галерея\nconst form = document.querySelector('.form'); // Форма\nconst input = document.querySelector('.input'); // Текстове поле вводу\nconst loader = document.querySelector('.loader'); // Лоадер (кнопка Search)\nconst loaderExtra = document.querySelector('.loader-extra'); // Лоадер (кнопка Load more)\nconst loadMoreButton = document.querySelector('.load-more'); // Кнопка \"Load more\"\n\n// Ховаємо кнопку перед початком завантаження нових зображень\nloadMoreButton.style.display = 'none';\n\n// Слухачі події для форми та кнопки \"Load more\"\nform.addEventListener('submit', handleSubmit);\nloadMoreButton.addEventListener('click', loadMoreImages);\n\n// Функція для обробки події Submit на формі\nasync function handleSubmit(event) {\n  event.preventDefault(); // Скасовуємо дефолтну поведінку форми (перезавантаження)\n\n  // Очищення вмісту галереї перед новим сабмітом (видаляємо всі наявні елементи списку <ul class=\"gallery\"></ul>)\n  gallery.innerHTML = '';\n\n  // Оновлюємо значення змінних (оголошені на початку файлу перед імпортом):\n  // currentQuery - записуємо текст з поля вводу форми\n  currentQuery = input.value.trim();\n\n  currentPage = 1; // Скидаємо значення сторінки на першау для нового пошуку\n\n  // Перевірка на порожній запит (якщо поле вводу пусте: false -> в true) і показ помилки з бібліотекою iziToast\n  if (!currentQuery) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Please enter a search query...',\n      position: 'topRight',\n    });\n    return; // Завершуємо функцію, якщо запит порожній\n  }\n\n  // Відображаємо лоадер (кнопка Search) на сторінці\n  loader.style.display = 'block';\n  loadMoreButton.style.display = 'none'; // Ховаємо кнопку \"Load more\" перед завантаженням\n\n  // Конструкція try...catch для відловлювання можливих помилок\n  try {\n    // Змінна response приймає значення виконання функції fetchImages (з файла pixabay.api.js)\n    const response = await fetchImages(currentQuery, currentPage);\n\n    // Оновлюємо значення змінної totalHits (response.totalHits - властивість об'єкта response з загальною кіль-тю зображень у відповіді сервера)\n    totalHits = response.totalHits; // Оновлюємо загальну кількість зображень\n\n    // Ховаємо лоадер (кнопка Search) на сторінці\n    loader.style.display = 'none';\n\n    // Перевірка на наявність результатів:\n    // Перевіряємо, чи масив зображень response.hits порожній. Якшо масив порожній (зображень за запитом не знайдено) - очищюємо наповнення галереї (видаляємо елементи списку <ul class=\"gallery\"></ul>) і виводимо повідомлення за допомогою iziToast.info() з текстом про відсутність результатів.\n    if (response.hits.length === 0) {\n      gallery.innerHTML = '';\n      iziToast.info({\n        title: 'No Results',\n        message:\n          'Sorry, there are no images matching your search query. Please try again!',\n        position: 'topRight',\n        timeout: 5000,\n      });\n      form.reset(); // Очищаємо форму\n      return; // Припиняємо подальше виконання функції\n    }\n\n    gallery.innerHTML = ''; // Очищаємо галерею перед відображенням нових зображень\n\n    // Викликаємо функцію createMarkup(). Генеруємо HTML розмітку для зображень та додаємо її до галереї (імпорт з ./js/render-functions) - приймає масив зображень response.hits\n    createMarkup(response.hits);\n\n    // Створюємо новий екземпляр SimpleLightbox з ініціалізацією на елементи посилань у \".gallery a\" (перегляд зображень у збільшеному вигляді)\n    lightbox = new SimpleLightbox('.gallery a', {\n      captions: true,\n      captionSelector: 'img',\n      captionType: 'attr',\n      captionsData: 'alt',\n      captionDelay: 250,\n    });\n\n    // Перевірка на кінець колекції:\n    // Змінна totalPages - результат ділення (загальної кіль-ті зображень на кіль-ть зображень на сторінці) округлений вверх\n    const totalPages = Math.ceil(totalHits / 15); // 15 - кількість зображень на сторінці\n    if (currentPage >= totalPages) {\n      // Якщо сторінка остання, ховаємо кнопку\n      loadMoreButton.style.display = 'none';\n      iziToast.info({\n        title: 'End of Results',\n        message: \"We're sorry, but you've reached the end of search results.\",\n        position: 'topRight',\n        timeout: 5000,\n      });\n    } else {\n      loadMoreButton.style.display = 'block'; // Інакше показуємо кнопку \"Load more\"\n    }\n  } catch (error) {\n    // Якщо сталася помилка, ховаємо лоадер і виводимо повідомлення через iziToast\n    loader.style.display = 'none';\n    iziToast.error({\n      title: 'Error',\n      message: 'Failed to fetch images. Please try again later.',\n      position: 'topRight',\n    });\n    console.error('Error fetching images:', error);\n  }\n}\n\n// Функція для обробки події \"click\" на кнопці \"Load More\"\nasync function loadMoreImages() {\n  // Перехід до наступної сторінки (перша сторінка вже відображена при сабміті)\n  currentPage += 1;\n\n  // Відображаємо лоадер для кнопки \"Load more\"\n  loaderExtra.style.display = 'block';\n  loadMoreButton.style.display = 'none'; // Ховаємо кнопку \"Load more\"\n\n  // Конструкція try...catch для відловлювання можливих помилок при запиті\n  try {\n    // Отримуємо нові зображення з API\n    // Змінна response приймає значення виконання функції fetchImages (з файла pixabay.api.js)\n    const response = await fetchImages(currentQuery, currentPage);\n\n    // Ховаємо лоадер (кнопка Search) на сторінці\n    loaderExtra.style.display = 'none';\n\n    // Перевірка на наявність результатів:\n    // Перевіряємо, чи масив зображень response.hits порожній. Якшо масив порожній (зображень за запитом не знайдено) - очищюємо наповнення галереї (видаляємо елементи списку <ul class=\"gallery\"></ul>) і виводимо повідомлення за допомогою iziToast.info() з текстом про відсутність результатів.\n    if (response.hits.length === 0) {\n      loadMoreButton.style.display = 'none'; // Ховаємо кнопку, якщо більше немає результатів\n      iziToast.info({\n        title: 'No More Results',\n        message: 'No more images available.',\n        position: 'topRight',\n        timeout: 5000,\n      });\n      return;\n    }\n\n    // Викликаємо функцію createMarkup() для створення динамічної розмітки(імпорт з ./js/render-functions) наступної сторінки з зображеннями ( приймає масив зображень response.hits)\n    createMarkup(response.hits); // Додаємо нову розмітку для додаткових зображень\n    scrollPage(); // Плавно прокручуємо сторінку вниз на 2 висоти зображення\n\n    // Перевірка на кінець колекції:\n    // Змінна totalPages - результат ділення (загальної кіль-ті зображень на кіль-ть зображень на сторінці) округлений вверх\n    const totalPages = Math.ceil(totalHits / 15); // Загальна кількість сторінок\n    // Порівнюємо номер поточної сторінки до кіль-ті всіх сторінок\n    if (currentPage >= totalPages) {\n      // Якщо поточна сторінка остання - ховаємо кнопку\n      loadMoreButton.style.display = 'none';\n      iziToast.info({\n        // Виводимо повідомлення\n        title: 'End of Results',\n        message: \"We're sorry, but you've reached the end of search results.\",\n        position: 'topRight',\n        timeout: 5000,\n      });\n    } else {\n      // В іншому випадку - показуємо кнопку \"Load more\"\n      loadMoreButton.style.display = 'block';\n    }\n\n    // Оновлюємо lightboxдля нових зображень, якщо він існує (це потрібно щоб очичтити кеш бібліотеки і в модалці відображались вже завантажені зображення)\n    if (lightbox) {\n      lightbox.refresh();\n    }\n  } catch (error) {\n    // // Якщо сталася помилка, ховаємо лоадер і показуємо кнопку для повторного запиту\n    loader.style.display = 'none';\n    loadMoreButton.style.display = 'block';\n    iziToast.error({\n      // Виводимо повідомлення\n      title: 'Error',\n      message: 'Failed to fetch more images. Please try again later.',\n      position: 'topRight',\n    });\n    console.error('Error fetching more images:', error);\n  }\n}\n\n// Функція для реалізація плавного скролу\nfunction scrollPage() {\n  // Знаходимо перший елемент галереї\n  const galleryItem = gallery.querySelector('.gallery-item');\n\n  // Перевіряємо наявність елемента, щоб уникнути помилки\n  // Якщо елементів немає, виходимо з функції\n  if (!galleryItem) return;\n\n  // Змінна для отримання висоти картки\n  const cardHeight = galleryItem.getBoundingClientRect().height;\n\n  // Прокручуємо на дві висоти картки\n  window.scrollBy({\n    left: 0,\n    top: cardHeight * 2, // Прокручуємо на висоту двох карток\n    behavior: 'smooth', // Плавний скрол\n  });\n}\n"],"names":["API_KEY","BASE_URL","fetchImages","query","page","searchParams","url","axios","error","gallery","createMarkup","arrImages","markup","image","lightbox","currentQuery","currentPage","totalHits","form","input","loader","loaderExtra","loadMoreButton","handleSubmit","loadMoreImages","event","iziToast","response","SimpleLightbox","totalPages","scrollPage","galleryItem","cardHeight"],"mappings":"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"}